###
###   Xaller Standard Library - str.xal
###   CreativeGP - 2017.10.3(yyyy.mm.dd)
###
###   A library to use advanced operations for string.


@ (strat (str)string (i)int) {
    return (substr str i 1)
}

# isnum ( str )
# 文字列が数字かどうか判別する関数
# str -- 判別する文字列
@ (isnum (str)string) {
    (i)int
    (numbers)string
    numbers = '0123456789'
    loop {
        (j)int
        loop {
            cond (eq (strat str i) (strat numbers j)) ? {
                escape
            }
            branch true ? {
                (eq j 9) ? {
                    return false
                }
            }
            j = (+ j 1)
        }
        i = (+ i 1)
        (eq i (strlen str)) ? {
            escape
        }
    }
    return true
}


# strdel ( str idx len )
# 文字列中のある箇所の文字列を削除して返す関数
# str -- ソース文字列
# idx -- 削除開始添字
# str -- 削除する長さ
# TODO(cgp) デフォルト引数を実装したときは、lenをデフォで１にするように改造する
@ (strdel (str)string (idx)int (len)int) {
    # NOTE idx が負の数だった場合最後からのインデックスとして再設定
    (< idx 0) ? {
        idx = (+ (strlen str) idx)
    }

    (res)string
    (i)int
    loop {
        (and (<= idx i) (< i (+ idx len))) ? {
        }
        branch true ? {
            res = (concat res (strat str i))
        }
        (eq i (strlen str)) ? {
            escape
        }
        i = (+ i 1)
    }
    return res
}

    
# strins ( src idx dst )
# 文字列中のある箇所に新しい文字列を挿入して返す関数
# src -- ソース文字列
# dst -- 追加する文字列
# idx -- 追加する箇所
@ (strins (src)string (idx)int (dst)string) {
    # NOTE idx が負の数だった場合最後からのインデックスとして再設定
    (< idx 0) ? {
        idx = (+ (strlen str) idx)
    }

    (res)string
    res = (concat (substr src 0 idx) dst (substr src idx))
    return res
}

abort
